package game;
import map.TileMap;
import map.UnitMap;

import java.util.ArrayList;
import unit.Unit;
import utilities.ArrayHandler;

public class Game {
	
	private int turn;
	private int currentTurn;
	private int player;
	private double[] resource;
	private ArrayList<ArrayList<Unit>> unitList;
	private int[][] allowedUnitList;
	private Player[] playerList;
	private TileMap tileMap;
	private double[][] tileMapCost;
	private double[][] playerTileMapCost;
	private Unit selectedUnit;
	private int selectedUnitID;
	private boolean unitSelected = false;
	private UnitMap unitTileMap;
	private double[][] selectedUnitTileMapCost;
	private double[][] selectedMoveOptions;
	private int[] selectedLocation;
	private Player currentPlayer;
	private ArrayList<Unit> currnetPlayerUnit;
	
	public Game()
	{
		turn = 0;
		player = 2;
		currentTurn = 0;
		resource = new double[2];
		resource[0] = 0;
		resource[1] = 0;
	}
	
	public Game(TileMap tileMap)
	{
		turn = 0;
		player = 2;
		currentTurn = 0;
		resource = new double[2];
		resource[0] = 0;
		resource[1] = 0;
		this.tileMap = tileMap;
		this.tileMapCost = tileMap.movementCostMap();
		int i = 0;
		int j = 0;
		for (i = 0; i < tileMap.getMap().length; i++)
		{
			for (j = 0; j < tileMap.getMap()[0].length; j++)
			{
				tileMapCost[i][j] = tileMap.getMap()[i][j].getMovementCost();
			}
		}
	}
	
	public Game(ArrayList<ArrayList<Unit>> unitList, TileMap tileMap)
	{
		turn = 0;
		player = 2;
		playerList = new Player[2];
		currentTurn = 0;
		resource = new double[2];
		resource[0] = 0;
		resource[1] = 0;
		this.unitList = unitList;
		this.tileMap = tileMap;
		this.tileMapCost = new double[tileMap.getMap().length][tileMap.getMap()[0].length];
		int i = 0;
		int j = 0;
		for (i = 0; i < tileMap.getMap().length; i++)
		{
			for (j = 0; j < tileMap.getMap()[0].length; j++)
			{
				tileMapCost[i][j] = tileMap.getMap()[i][j].getMovementCost();
			}
		}
		playerTileMapCost = ArrayHandler.cloneMatrix(tileMapCost);
		unitTileMap = new UnitMap(unitList, tileMap.getMap().length, tileMap.getMap()[0].length);
		int[] unitLocation;
		ArrayList<Unit> playerUnits;
		for (i = 0; i < unitList.size() - 1; i++)
		{
			if (i >= currentTurn)
			{
				i++;
			}
			playerUnits = unitList.get(i);
			for (j = 0; j < playerUnits.size(); j++)
			{
				unitLocation = playerUnits.get(j).getLocation().getLocation().clone();
				playerTileMapCost[unitLocation[0]][unitLocation[1]] = 65535;
			}
		}
		unitTileMap.updateMap(unitList);
	}
	
	public int getTurn()
	{
		return turn;
	}
	
	public int[] getSelectedLocation()
	{
		return selectedLocation;
	}
	
	public int getSelectedY()
	{
		return selectedLocation[0];
	}
	
	public int getSelectedX()
	{
		return selectedLocation[1];
	}
	
	public UnitMap getUnitTileMap()
	{
		return unitTileMap;
	}
	
	public Unit getSelectedUnit()
	{
		return selectedUnit;
	}
	
	public int getCurrentTurn()
	{
		return currentTurn;
	}
	
	public TileMap getTileMap()
	{
		return tileMap;
	}
	
	public double[][] getPlayerTileMapCost()
	{
		return playerTileMapCost;
	}
	
	public double[][] getTileMapCost()
	{
		return tileMapCost;
	}
	
	public ArrayList<ArrayList<Unit>> getUnitList()
	{
		return unitList;
	}
	
	public boolean getUnitSelected()
	{
		return unitSelected;
	}
	
	public double[][] getSelectedUnitTileMapCost()
	{
		return selectedUnitTileMapCost;
	}
	
	public void deselect()
	{
		selectedUnit = null;
		unitSelected = false;
	}
	
	public void select(int[] location)
	{
		selectedLocation = location;
		Unit selected = unitTileMap.getMap(location[0],location[1]);
		if (selected != null)
		{
			selectedUnit = selected;
			selectedUnitID = selectedUnit.getUnitID();
			unitSelected = true;
		}
	}
	
	public void selectUnit(int unitID)
	{
		selectedUnit = unitList.get(currentTurn).get(unitID);
		selectedUnitID = unitID;
		unitSelected = true;
	}
	
	public void selectedUnitAttack(Unit target, int attackNumber)
	{
		selectedUnit.attack(target, attackNumber);
		if (selectedUnit.getHealthPoint() == 0)
		{
			removeUnit(selectedUnit);
		}
		if (target.getHealthPoint() == 0)
		{
			removeUnit(target);
		}
		deselect();
	}
	
	public void removeUnit (Unit remove)
	{
		int removeUnitID = remove.getUnitID();
		unitList.get(remove.getPlayer()).remove(removeUnitID);
		unitTileMap.updateMap(remove);
		for (int i = 0; i < unitList.get(remove.getPlayer()).size(); i++)
		{
			unitList.get(remove.getPlayer()).get(i).setUnitID(i);
		}
	}
	
	public void moveSelectedUnit(int[] location)
	{
		int[] selectedUnitOldLocation = selectedUnit.getLocation().getLocation();
		selectedUnit.move(location, selectedUnitTileMapCost[location[0]][location[1]]);
		unitTileMap.updateMap(selectedUnit, selectedUnitOldLocation);
	}
	
	public void updateSelectedMovementRange()
	{
		selectedUnitTileMapCost = ArrayHandler.cloneMatrix(calculateUnitMovementRange(selectedUnitID));
	}
	
	public void updateSelectedMovementOptions()
	{
		selectedUnitTileMapCost = ArrayHandler.cloneMatrix(calculateUnitMovementRange(selectedUnitID));
		selectedMoveOptions = ArrayHandler.cloneMatrix(selectedUnitTileMapCost);
		int i = 0;
		Unit unit;
		for (i = 0; i < unitList.size()-1; i++)
		{
			unit = unitList.get(currentTurn).get(i);
			selectedMoveOptions[unit.getY()][unit.getX()] = 0.0;
		}
	}
	
	public boolean selecetedUnitCheckValidMove(int[] location)
	{
		if (selectedMoveOptions[location[0]][location[1]] > 0.0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	public boolean selecetedUnitUpdateValidMove(int[] location)
	{
		updateSelectedMovementOptions();
		if (selectedMoveOptions[location[0]][location[1]] > 0.0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	public double[][] calculateSelectedMovementRange()
	{
		selectedUnitTileMapCost = ArrayHandler.cloneMatrix(calculateUnitMovementRange(selectedUnitID));
		return selectedUnitTileMapCost;
	}
	
	public double[][] calculateUnitMovementRange(int unit)
	{
		//Maybe use recursive programming?? To replace the arrays
		
		Unit unitUsed = unitList.get(currentTurn).get(unit);
		//tileMap.getMap().length * tileMap.getMap()[0].length
		double[][] unitSpace = new double[tileMap.getMap().length][tileMap.getMap()[0].length];
		ArrayList<int[]> tileToCheck = new ArrayList<int[]>();
		ArrayList<int[]> tileToCheckNext = new ArrayList<int[]>();
		int i = 0;
		int j = 0;
		int x;
		int y;
		for (i = 0; i < unitSpace.length; i++)
		{
			for (j = 0; j < unitSpace[0].length; j++)
			{
				unitSpace[i][j] = 0;
			}
		}
		tileToCheck.add(new int[]{unitUsed.getY(),unitUsed.getX()});
		unitSpace[unitUsed.getY()][unitUsed.getX()] = unitUsed.getMoveRange();
		double xyValue = 0;
		while (tileToCheck.size() > 0)
		{
			for(i = 0; i < tileToCheck.size(); i++)
			{
				x = tileToCheck.get(i)[0];
				y = tileToCheck.get(i)[1];
				if(x + 1 < unitSpace.length)
				{
					xyValue = unitSpace[x][y] - playerTileMapCost[x + 1][y];
					if (unitSpace[x + 1][y] < xyValue)
					{
						tileToCheckNext.add(new int[] {x + 1, y});
						unitSpace[x + 1][y] = xyValue;
					}
				}
				if(y + 1 < unitSpace[0].length)
				{
					xyValue = unitSpace[x][y] - playerTileMapCost[x][y + 1];
					if (unitSpace[x][y + 1] < xyValue)
					{
						tileToCheckNext.add(new int[] {x, y + 1});
						unitSpace[x][y + 1] = xyValue;
					}
				}
				if(x - 1 > -1)
				{
					xyValue = unitSpace[x][y] - playerTileMapCost[x - 1][y];
					if (unitSpace[x - 1][y] < xyValue)
					{
						tileToCheckNext.add(new int[] {x - 1, y});
						unitSpace[x - 1][y] = xyValue;
					}
				}
				if(y - 1 > -1)
				{
					xyValue = unitSpace[x][y] - playerTileMapCost[x][y - 1];
					if (unitSpace[x][y - 1] < xyValue)
					{
						tileToCheckNext.add(new int[] {x, y - 1});
						unitSpace[x][y - 1] = xyValue;
					}
				}
			}
			tileToCheck = (ArrayList<int[]>) tileToCheckNext.clone();
			tileToCheckNext.clear();
		}
		return unitSpace;
	}
	
	public void advanceTurn()
	{
		currentTurn ++;
		selectedUnitID = -1;
		unitSelected = false;
		int i = 0;
		int j = 0;
		ArrayList<Unit> playerUnits;
		int[] unitLocation;
		if (currentTurn >= player)
		{
			currentTurn = 0;
			turn ++;
			for (i = 0; i < unitList.size(); i++)
			{
				playerUnits = unitList.get(i);
				for (j = 0; j < playerUnits.size(); j++)
				{
					playerUnits.get(j).incrementTurn();
				}
			}
		}
		playerTileMapCost = ArrayHandler.cloneMatrix(tileMapCost);
		for (i = 0; i < unitList.size()-1; i++)
		{
			if (i >= currentTurn)
			{
				i++;
			}
			playerUnits = unitList.get(i);
			for (j = 0; j < playerUnits.size(); j++)
			{
				unitLocation = playerUnits.get(j).getLocation().getLocation().clone();
				playerTileMapCost[unitLocation[0]][unitLocation[1]] = 65535;
			}
		}
	}
	
}

